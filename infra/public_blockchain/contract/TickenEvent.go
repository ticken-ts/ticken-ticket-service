// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package public_blockchain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Ticket is an auto generated low-level Go binding around an user-defined struct.
type Ticket struct {
	Section string
	Scanned bool
}

// TickenEventMetaData contains all meta data concerning the TickenEvent contract.
var TickenEventMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"section\",\"type\":\"string\"}],\"name\":\"TicketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"section\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"scanned\",\"type\":\"bool\"}],\"internalType\":\"structTicket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"section\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"scanTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600b81526020017f5469636b656e4576656e740000000000000000000000000000000000000000008152506040518060400160405280600281526020017f544500000000000000000000000000000000000000000000000000000000000081525081600090816200008f91906200042d565b508060019081620000a191906200042d565b5050506000600660006101000a81548160ff021916908315150217905550620000df620000d3620000e560201b60201c565b620000ed60201b60201c565b62000514565b600033905090565b6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023557607f821691505b6020821081036200024b576200024a620001ed565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000276565b620002c1868362000276565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200030e620003086200030284620002d9565b620002e3565b620002d9565b9050919050565b6000819050919050565b6200032a83620002ed565b62000342620003398262000315565b84845462000283565b825550505050565b600090565b620003596200034a565b620003668184846200031f565b505050565b5b818110156200038e57620003826000826200034f565b6001810190506200036c565b5050565b601f821115620003dd57620003a78162000251565b620003b28462000266565b81016020851015620003c2578190505b620003da620003d18562000266565b8301826200036b565b50505b505050565b600082821c905092915050565b60006200040260001984600802620003e2565b1980831691505092915050565b60006200041d8383620003ef565b9150826002028217905092915050565b6200043882620001b3565b67ffffffffffffffff811115620004545762000453620001be565b5b6200046082546200021c565b6200046d82828562000392565b600060209050601f831160018114620004a5576000841562000490578287015190505b6200049c85826200040f565b8655506200050c565b601f198416620004b58662000251565b60005b82811015620004df57848901518255600182019150602085019450602081019050620004b8565b86831015620004ff5784890151620004fb601f891682620003ef565b8355505b6001600288020188555050505b505050505050565b6134d580620005246000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637dc379fa116100b8578063b88d4fde1161007c578063b88d4fde1461033d578063c87b56dd14610359578063d204c45e14610389578063daf62ebb146103a5578063e985e9c5146103c1578063f2fde38b146103f157610142565b80637dc379fa146102ab5780638456cb59146102db5780638da5cb5b146102e557806395d89b4114610303578063a22cb4651461032157610142565b80633f4ba83a1161010a5780633f4ba83a146101fd57806342842e0e146102075780635c975abb146102235780636352211e1461024157806370a0823114610271578063715018a6146102a157610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806323b872dd146101e1575b600080fd5b610161600480360381019061015c919061206f565b61040d565b60405161016e91906120b7565b60405180910390f35b61017f6104ef565b60405161018c9190612162565b60405180910390f35b6101af60048036038101906101aa91906121ba565b610581565b6040516101bc9190612228565b60405180910390f35b6101df60048036038101906101da919061226f565b6105c7565b005b6101fb60048036038101906101f691906122af565b6106de565b005b61020561073e565b005b610221600480360381019061021c91906122af565b610750565b005b61022b610770565b60405161023891906120b7565b60405180910390f35b61025b600480360381019061025691906121ba565b610787565b6040516102689190612228565b60405180910390f35b61028b60048036038101906102869190612302565b61080d565b604051610298919061233e565b60405180910390f35b6102a96108c4565b005b6102c560048036038101906102c091906121ba565b6108d8565b6040516102d291906123ef565b60405180910390f35b6102e36109fa565b005b6102ed610a0c565b6040516102fa9190612228565b60405180910390f35b61030b610a36565b6040516103189190612162565b60405180910390f35b61033b6004803603810190610336919061243d565b610ac8565b005b610357600480360381019061035291906125b2565b610ade565b005b610373600480360381019061036e91906121ba565b610b40565b6040516103809190612162565b60405180910390f35b6103a3600480360381019061039e91906126d6565b610ba8565b005b6103bf60048036038101906103ba91906121ba565b610c7d565b005b6103db60048036038101906103d69190612732565b610d07565b6040516103e891906120b7565b60405180910390f35b61040b60048036038101906104069190612302565b610d9b565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104d857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104e857506104e782610e1e565b5b9050919050565b6060600080546104fe906127a1565b80601f016020809104026020016040519081016040528092919081815260200182805461052a906127a1565b80156105775780601f1061054c57610100808354040283529160200191610577565b820191906000526020600020905b81548152906001019060200180831161055a57829003601f168201915b5050505050905090565b600061058c82610e88565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105d282610787565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610642576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063990612844565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610661610ed3565b73ffffffffffffffffffffffffffffffffffffffff161480610690575061068f8161068a610ed3565b610d07565b5b6106cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c6906128d6565b60405180910390fd5b6106d98383610edb565b505050565b6106ef6106e9610ed3565b82610f94565b61072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072590612968565b60405180910390fd5b610739838383611029565b505050565b610746611322565b61074e6113a0565b565b61076b83838360405180602001604052806000815250610ade565b505050565b6000600660009054906101000a900460ff16905090565b60008061079383611403565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fb906129d4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361087d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087490612a66565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108cc611322565b6108d66000611440565b565b6108e0611fe7565b6108e982611506565b610928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091f90612af8565b60405180910390fd5b60086000838152602001908152602001600020604051806040016040529081600082018054610956906127a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610982906127a1565b80156109cf5780601f106109a4576101008083540402835291602001916109cf565b820191906000526020600020905b8154815290600101906020018083116109b257829003601f168201915b505050505081526020016001820160009054906101000a900460ff1615151515815250509050919050565b610a02611322565b610a0a611547565b565b6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610a45906127a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a71906127a1565b8015610abe5780601f10610a9357610100808354040283529160200191610abe565b820191906000526020600020905b815481529060010190602001808311610aa157829003601f168201915b5050505050905090565b610ada610ad3610ed3565b83836115aa565b5050565b610aef610ae9610ed3565b83610f94565b610b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2590612968565b60405180910390fd5b610b3a84848484611716565b50505050565b6060610b4b82610e88565b6000610b55611772565b90506000815111610b755760405180602001604052806000815250610ba0565b80610b7f84611789565b604051602001610b90929190612b54565b6040516020818303038152906040525b915050919050565b610bb0611857565b610bb8611322565b6000610bc460076118a1565b9050610bd060076118af565b610bda83826118c5565b604051806040016040528083815260200160001515815250600860008381526020019081526020016000206000820151816000019081610c1a9190612d24565b5060208201518160010160006101000a81548160ff021916908315150217905550905050807f7855cbf78d66c808eecc029b64112ad83f9386e16b47f653e6eac8bc69beda618484604051610c70929190612df6565b60405180910390a2505050565b610c85611857565b610c8d611322565b610c9681611506565b610cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccc90612af8565b60405180910390fd5b60016008600083815260200190815260200160002060010160006101000a81548160ff02191690831515021790555050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610da3611322565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990612e98565b60405180910390fd5b610e1b81611440565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610e9181611506565b610ed0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec7906129d4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f4e83610787565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610fa083610787565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610fe25750610fe18185610d07565b5b8061102057508373ffffffffffffffffffffffffffffffffffffffff1661100884610581565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661104982610787565b73ffffffffffffffffffffffffffffffffffffffff161461109f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109690612f2a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110590612fbc565b60405180910390fd5b61111b83838360016118e3565b8273ffffffffffffffffffffffffffffffffffffffff1661113b82610787565b73ffffffffffffffffffffffffffffffffffffffff1614611191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118890612f2a565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461131d83838360016118fd565b505050565b61132a610ed3565b73ffffffffffffffffffffffffffffffffffffffff16611348610a0c565b73ffffffffffffffffffffffffffffffffffffffff161461139e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139590613028565b60405180910390fd5b565b6113a8611903565b6000600660006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6113ec610ed3565b6040516113f99190612228565b60405180910390a1565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff1661152883611403565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61154f611857565b6001600660006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611593610ed3565b6040516115a09190612228565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160f90613094565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161170991906120b7565b60405180910390a3505050565b611721848484611029565b61172d8484848461194c565b61176c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176390613126565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161179884611ad3565b01905060008167ffffffffffffffff8111156117b7576117b6612487565b5b6040519080825280601f01601f1916602001820160405280156117e95781602001600182028036833780820191505090505b509050600082602001820190505b60011561184c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816118405761183f613146565b5b049450600085036117f7575b819350505050919050565b61185f610770565b1561189f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611896906131c1565b60405180910390fd5b565b600081600001549050919050565b6001816000016000828254019250508190555050565b6118df828260405180602001604052806000815250611c26565b5050565b6118eb611857565b6118f784848484611c81565b50505050565b50505050565b61190b610770565b61194a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119419061322d565b60405180910390fd5b565b600061196d8473ffffffffffffffffffffffffffffffffffffffff16611da7565b15611ac6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611996610ed3565b8786866040518563ffffffff1660e01b81526004016119b894939291906132a2565b6020604051808303816000875af19250505080156119f457506040513d601f19601f820116820180604052508101906119f19190613303565b60015b611a76573d8060008114611a24576040519150601f19603f3d011682016040523d82523d6000602084013e611a29565b606091505b506000815103611a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6590613126565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611acb565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611b31577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611b2757611b26613146565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611b6e576d04ee2d6d415b85acef81000000008381611b6457611b63613146565b5b0492506020810190505b662386f26fc100008310611b9d57662386f26fc100008381611b9357611b92613146565b5b0492506010810190505b6305f5e1008310611bc6576305f5e1008381611bbc57611bbb613146565b5b0492506008810190505b6127108310611beb576127108381611be157611be0613146565b5b0492506004810190505b60648310611c0e5760648381611c0457611c03613146565b5b0492506002810190505b600a8310611c1d576001810190505b80915050919050565b611c308383611dca565b611c3d600084848461194c565b611c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7390613126565b60405180910390fd5b505050565b6001811115611da157600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611d155780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d0d919061335f565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611da05780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d989190613393565b925050819055505b5b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3090613413565b60405180910390fd5b611e4281611506565b15611e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e799061347f565b60405180910390fd5b611e906000838360016118e3565b611e9981611506565b15611ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed09061347f565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611fe36000838360016118fd565b5050565b6040518060400160405280606081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61204c81612017565b811461205757600080fd5b50565b60008135905061206981612043565b92915050565b6000602082840312156120855761208461200d565b5b60006120938482850161205a565b91505092915050565b60008115159050919050565b6120b18161209c565b82525050565b60006020820190506120cc60008301846120a8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561210c5780820151818401526020810190506120f1565b60008484015250505050565b6000601f19601f8301169050919050565b6000612134826120d2565b61213e81856120dd565b935061214e8185602086016120ee565b61215781612118565b840191505092915050565b6000602082019050818103600083015261217c8184612129565b905092915050565b6000819050919050565b61219781612184565b81146121a257600080fd5b50565b6000813590506121b48161218e565b92915050565b6000602082840312156121d0576121cf61200d565b5b60006121de848285016121a5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612212826121e7565b9050919050565b61222281612207565b82525050565b600060208201905061223d6000830184612219565b92915050565b61224c81612207565b811461225757600080fd5b50565b60008135905061226981612243565b92915050565b600080604083850312156122865761228561200d565b5b60006122948582860161225a565b92505060206122a5858286016121a5565b9150509250929050565b6000806000606084860312156122c8576122c761200d565b5b60006122d68682870161225a565b93505060206122e78682870161225a565b92505060406122f8868287016121a5565b9150509250925092565b6000602082840312156123185761231761200d565b5b60006123268482850161225a565b91505092915050565b61233881612184565b82525050565b6000602082019050612353600083018461232f565b92915050565b600082825260208201905092915050565b6000612375826120d2565b61237f8185612359565b935061238f8185602086016120ee565b61239881612118565b840191505092915050565b6123ac8161209c565b82525050565b600060408301600083015184820360008601526123cf828261236a565b91505060208301516123e460208601826123a3565b508091505092915050565b6000602082019050818103600083015261240981846123b2565b905092915050565b61241a8161209c565b811461242557600080fd5b50565b60008135905061243781612411565b92915050565b600080604083850312156124545761245361200d565b5b60006124628582860161225a565b925050602061247385828601612428565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124bf82612118565b810181811067ffffffffffffffff821117156124de576124dd612487565b5b80604052505050565b60006124f1612003565b90506124fd82826124b6565b919050565b600067ffffffffffffffff82111561251d5761251c612487565b5b61252682612118565b9050602081019050919050565b82818337600083830152505050565b600061255561255084612502565b6124e7565b90508281526020810184848401111561257157612570612482565b5b61257c848285612533565b509392505050565b600082601f8301126125995761259861247d565b5b81356125a9848260208601612542565b91505092915050565b600080600080608085870312156125cc576125cb61200d565b5b60006125da8782880161225a565b94505060206125eb8782880161225a565b93505060406125fc878288016121a5565b925050606085013567ffffffffffffffff81111561261d5761261c612012565b5b61262987828801612584565b91505092959194509250565b600067ffffffffffffffff8211156126505761264f612487565b5b61265982612118565b9050602081019050919050565b600061267961267484612635565b6124e7565b90508281526020810184848401111561269557612694612482565b5b6126a0848285612533565b509392505050565b600082601f8301126126bd576126bc61247d565b5b81356126cd848260208601612666565b91505092915050565b600080604083850312156126ed576126ec61200d565b5b60006126fb8582860161225a565b925050602083013567ffffffffffffffff81111561271c5761271b612012565b5b612728858286016126a8565b9150509250929050565b600080604083850312156127495761274861200d565b5b60006127578582860161225a565b92505060206127688582860161225a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127b957607f821691505b6020821081036127cc576127cb612772565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061282e6021836120dd565b9150612839826127d2565b604082019050919050565b6000602082019050818103600083015261285d81612821565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006128c0603d836120dd565b91506128cb82612864565b604082019050919050565b600060208201905081810360008301526128ef816128b3565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612952602d836120dd565b915061295d826128f6565b604082019050919050565b6000602082019050818103600083015261298181612945565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006129be6018836120dd565b91506129c982612988565b602082019050919050565b600060208201905081810360008301526129ed816129b1565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612a506029836120dd565b9150612a5b826129f4565b604082019050919050565b60006020820190508181036000830152612a7f81612a43565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612ae2602c836120dd565b9150612aed82612a86565b604082019050919050565b60006020820190508181036000830152612b1181612ad5565b9050919050565b600081905092915050565b6000612b2e826120d2565b612b388185612b18565b9350612b488185602086016120ee565b80840191505092915050565b6000612b608285612b23565b9150612b6c8284612b23565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612bda7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612b9d565b612be48683612b9d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612c21612c1c612c1784612184565b612bfc565b612184565b9050919050565b6000819050919050565b612c3b83612c06565b612c4f612c4782612c28565b848454612baa565b825550505050565b600090565b612c64612c57565b612c6f818484612c32565b505050565b5b81811015612c9357612c88600082612c5c565b600181019050612c75565b5050565b601f821115612cd857612ca981612b78565b612cb284612b8d565b81016020851015612cc1578190505b612cd5612ccd85612b8d565b830182612c74565b50505b505050565b600082821c905092915050565b6000612cfb60001984600802612cdd565b1980831691505092915050565b6000612d148383612cea565b9150826002028217905092915050565b612d2d826120d2565b67ffffffffffffffff811115612d4657612d45612487565b5b612d5082546127a1565b612d5b828285612c97565b600060209050601f831160018114612d8e5760008415612d7c578287015190505b612d868582612d08565b865550612dee565b601f198416612d9c86612b78565b60005b82811015612dc457848901518255600182019150602085019450602081019050612d9f565b86831015612de15784890151612ddd601f891682612cea565b8355505b6001600288020188555050505b505050505050565b6000604082019050612e0b6000830185612219565b8181036020830152612e1d8184612129565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612e826026836120dd565b9150612e8d82612e26565b604082019050919050565b60006020820190508181036000830152612eb181612e75565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612f146025836120dd565b9150612f1f82612eb8565b604082019050919050565b60006020820190508181036000830152612f4381612f07565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612fa66024836120dd565b9150612fb182612f4a565b604082019050919050565b60006020820190508181036000830152612fd581612f99565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130126020836120dd565b915061301d82612fdc565b602082019050919050565b6000602082019050818103600083015261304181613005565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061307e6019836120dd565b915061308982613048565b602082019050919050565b600060208201905081810360008301526130ad81613071565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006131106032836120dd565b915061311b826130b4565b604082019050919050565b6000602082019050818103600083015261313f81613103565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006131ab6010836120dd565b91506131b682613175565b602082019050919050565b600060208201905081810360008301526131da8161319e565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006132176014836120dd565b9150613222826131e1565b602082019050919050565b600060208201905081810360008301526132468161320a565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006132748261324d565b61327e8185613258565b935061328e8185602086016120ee565b61329781612118565b840191505092915050565b60006080820190506132b76000830187612219565b6132c46020830186612219565b6132d1604083018561232f565b81810360608301526132e38184613269565b905095945050505050565b6000815190506132fd81612043565b92915050565b6000602082840312156133195761331861200d565b5b6000613327848285016132ee565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061336a82612184565b915061337583612184565b925082820390508181111561338d5761338c613330565b5b92915050565b600061339e82612184565b91506133a983612184565b92508282019050808211156133c1576133c0613330565b5b92915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006133fd6020836120dd565b9150613408826133c7565b602082019050919050565b6000602082019050818103600083015261342c816133f0565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613469601c836120dd565b915061347482613433565b602082019050919050565b600060208201905081810360008301526134988161345c565b905091905056fea2646970667358221220bb05ee2e13c1594efdb4cafdb0e32d62e05332c136d1d200ac12317f39c6dd1b64736f6c63430008110033",
}

// TickenEventABI is the input ABI used to generate the binding from.
// Deprecated: Use TickenEventMetaData.ABI instead.
var TickenEventABI = TickenEventMetaData.ABI

// TickenEventBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TickenEventMetaData.Bin instead.
var TickenEventBin = TickenEventMetaData.Bin

// DeployTickenEvent deploys a new Ethereum contract, binding an instance of TickenEvent to it.
func DeployTickenEvent(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TickenEvent, error) {
	parsed, err := TickenEventMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TickenEventBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TickenEvent{TickenEventCaller: TickenEventCaller{contract: contract}, TickenEventTransactor: TickenEventTransactor{contract: contract}, TickenEventFilterer: TickenEventFilterer{contract: contract}}, nil
}

// TickenEvent is an auto generated Go binding around an Ethereum contract.
type TickenEvent struct {
	TickenEventCaller     // Read-only binding to the contract
	TickenEventTransactor // Write-only binding to the contract
	TickenEventFilterer   // Log filterer for contract events
}

// TickenEventCaller is an auto generated read-only Go binding around an Ethereum contract.
type TickenEventCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickenEventTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TickenEventTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickenEventFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TickenEventFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickenEventSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TickenEventSession struct {
	Contract     *TickenEvent      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TickenEventCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TickenEventCallerSession struct {
	Contract *TickenEventCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TickenEventTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TickenEventTransactorSession struct {
	Contract     *TickenEventTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TickenEventRaw is an auto generated low-level Go binding around an Ethereum contract.
type TickenEventRaw struct {
	Contract *TickenEvent // Generic contract binding to access the raw methods on
}

// TickenEventCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TickenEventCallerRaw struct {
	Contract *TickenEventCaller // Generic read-only contract binding to access the raw methods on
}

// TickenEventTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TickenEventTransactorRaw struct {
	Contract *TickenEventTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTickenEvent creates a new instance of TickenEvent, bound to a specific deployed contract.
func NewTickenEvent(address common.Address, backend bind.ContractBackend) (*TickenEvent, error) {
	contract, err := bindTickenEvent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TickenEvent{TickenEventCaller: TickenEventCaller{contract: contract}, TickenEventTransactor: TickenEventTransactor{contract: contract}, TickenEventFilterer: TickenEventFilterer{contract: contract}}, nil
}

// NewTickenEventCaller creates a new read-only instance of TickenEvent, bound to a specific deployed contract.
func NewTickenEventCaller(address common.Address, caller bind.ContractCaller) (*TickenEventCaller, error) {
	contract, err := bindTickenEvent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TickenEventCaller{contract: contract}, nil
}

// NewTickenEventTransactor creates a new write-only instance of TickenEvent, bound to a specific deployed contract.
func NewTickenEventTransactor(address common.Address, transactor bind.ContractTransactor) (*TickenEventTransactor, error) {
	contract, err := bindTickenEvent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TickenEventTransactor{contract: contract}, nil
}

// NewTickenEventFilterer creates a new log filterer instance of TickenEvent, bound to a specific deployed contract.
func NewTickenEventFilterer(address common.Address, filterer bind.ContractFilterer) (*TickenEventFilterer, error) {
	contract, err := bindTickenEvent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TickenEventFilterer{contract: contract}, nil
}

// bindTickenEvent binds a generic wrapper to an already deployed contract.
func bindTickenEvent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TickenEventABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TickenEvent *TickenEventRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TickenEvent.Contract.TickenEventCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TickenEvent *TickenEventRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.Contract.TickenEventTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TickenEvent *TickenEventRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TickenEvent.Contract.TickenEventTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TickenEvent *TickenEventCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TickenEvent.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TickenEvent *TickenEventTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TickenEvent *TickenEventTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TickenEvent.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TickenEvent *TickenEventCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TickenEvent *TickenEventSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TickenEvent.Contract.BalanceOf(&_TickenEvent.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TickenEvent *TickenEventCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TickenEvent.Contract.BalanceOf(&_TickenEvent.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TickenEvent.Contract.GetApproved(&_TickenEvent.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TickenEvent.Contract.GetApproved(&_TickenEvent.CallOpts, tokenId)
}

// GetTicket is a free data retrieval call binding the contract method 0x7dc379fa.
//
// Solidity: function getTicket(uint256 tokenId) view returns((string,bool))
func (_TickenEvent *TickenEventCaller) GetTicket(opts *bind.CallOpts, tokenId *big.Int) (Ticket, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "getTicket", tokenId)

	if err != nil {
		return *new(Ticket), err
	}

	out0 := *abi.ConvertType(out[0], new(Ticket)).(*Ticket)

	return out0, err

}

// GetTicket is a free data retrieval call binding the contract method 0x7dc379fa.
//
// Solidity: function getTicket(uint256 tokenId) view returns((string,bool))
func (_TickenEvent *TickenEventSession) GetTicket(tokenId *big.Int) (Ticket, error) {
	return _TickenEvent.Contract.GetTicket(&_TickenEvent.CallOpts, tokenId)
}

// GetTicket is a free data retrieval call binding the contract method 0x7dc379fa.
//
// Solidity: function getTicket(uint256 tokenId) view returns((string,bool))
func (_TickenEvent *TickenEventCallerSession) GetTicket(tokenId *big.Int) (Ticket, error) {
	return _TickenEvent.Contract.GetTicket(&_TickenEvent.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TickenEvent *TickenEventCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TickenEvent *TickenEventSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TickenEvent.Contract.IsApprovedForAll(&_TickenEvent.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TickenEvent *TickenEventCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TickenEvent.Contract.IsApprovedForAll(&_TickenEvent.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TickenEvent *TickenEventCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TickenEvent *TickenEventSession) Name() (string, error) {
	return _TickenEvent.Contract.Name(&_TickenEvent.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TickenEvent *TickenEventCallerSession) Name() (string, error) {
	return _TickenEvent.Contract.Name(&_TickenEvent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TickenEvent *TickenEventCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TickenEvent *TickenEventSession) Owner() (common.Address, error) {
	return _TickenEvent.Contract.Owner(&_TickenEvent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TickenEvent *TickenEventCallerSession) Owner() (common.Address, error) {
	return _TickenEvent.Contract.Owner(&_TickenEvent.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TickenEvent.Contract.OwnerOf(&_TickenEvent.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TickenEvent.Contract.OwnerOf(&_TickenEvent.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TickenEvent *TickenEventCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TickenEvent *TickenEventSession) Paused() (bool, error) {
	return _TickenEvent.Contract.Paused(&_TickenEvent.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TickenEvent *TickenEventCallerSession) Paused() (bool, error) {
	return _TickenEvent.Contract.Paused(&_TickenEvent.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TickenEvent *TickenEventCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TickenEvent *TickenEventSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TickenEvent.Contract.SupportsInterface(&_TickenEvent.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TickenEvent *TickenEventCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TickenEvent.Contract.SupportsInterface(&_TickenEvent.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TickenEvent *TickenEventCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TickenEvent *TickenEventSession) Symbol() (string, error) {
	return _TickenEvent.Contract.Symbol(&_TickenEvent.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TickenEvent *TickenEventCallerSession) Symbol() (string, error) {
	return _TickenEvent.Contract.Symbol(&_TickenEvent.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TickenEvent *TickenEventCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TickenEvent *TickenEventSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TickenEvent.Contract.TokenURI(&_TickenEvent.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TickenEvent *TickenEventCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TickenEvent.Contract.TokenURI(&_TickenEvent.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.Approve(&_TickenEvent.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.Approve(&_TickenEvent.TransactOpts, to, tokenId)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TickenEvent *TickenEventTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TickenEvent *TickenEventSession) Pause() (*types.Transaction, error) {
	return _TickenEvent.Contract.Pause(&_TickenEvent.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TickenEvent *TickenEventTransactorSession) Pause() (*types.Transaction, error) {
	return _TickenEvent.Contract.Pause(&_TickenEvent.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TickenEvent *TickenEventTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TickenEvent *TickenEventSession) RenounceOwnership() (*types.Transaction, error) {
	return _TickenEvent.Contract.RenounceOwnership(&_TickenEvent.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TickenEvent *TickenEventTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TickenEvent.Contract.RenounceOwnership(&_TickenEvent.TransactOpts)
}

// SafeMint is a paid mutator transaction binding the contract method 0xd204c45e.
//
// Solidity: function safeMint(address to, string section) returns()
func (_TickenEvent *TickenEventTransactor) SafeMint(opts *bind.TransactOpts, to common.Address, section string) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "safeMint", to, section)
}

// SafeMint is a paid mutator transaction binding the contract method 0xd204c45e.
//
// Solidity: function safeMint(address to, string section) returns()
func (_TickenEvent *TickenEventSession) SafeMint(to common.Address, section string) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeMint(&_TickenEvent.TransactOpts, to, section)
}

// SafeMint is a paid mutator transaction binding the contract method 0xd204c45e.
//
// Solidity: function safeMint(address to, string section) returns()
func (_TickenEvent *TickenEventTransactorSession) SafeMint(to common.Address, section string) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeMint(&_TickenEvent.TransactOpts, to, section)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeTransferFrom(&_TickenEvent.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeTransferFrom(&_TickenEvent.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TickenEvent *TickenEventTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TickenEvent *TickenEventSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeTransferFrom0(&_TickenEvent.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TickenEvent *TickenEventTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeTransferFrom0(&_TickenEvent.TransactOpts, from, to, tokenId, data)
}

// ScanTicket is a paid mutator transaction binding the contract method 0xdaf62ebb.
//
// Solidity: function scanTicket(uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactor) ScanTicket(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "scanTicket", tokenId)
}

// ScanTicket is a paid mutator transaction binding the contract method 0xdaf62ebb.
//
// Solidity: function scanTicket(uint256 tokenId) returns()
func (_TickenEvent *TickenEventSession) ScanTicket(tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.ScanTicket(&_TickenEvent.TransactOpts, tokenId)
}

// ScanTicket is a paid mutator transaction binding the contract method 0xdaf62ebb.
//
// Solidity: function scanTicket(uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactorSession) ScanTicket(tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.ScanTicket(&_TickenEvent.TransactOpts, tokenId)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TickenEvent *TickenEventTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TickenEvent *TickenEventSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TickenEvent.Contract.SetApprovalForAll(&_TickenEvent.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TickenEvent *TickenEventTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TickenEvent.Contract.SetApprovalForAll(&_TickenEvent.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.TransferFrom(&_TickenEvent.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.TransferFrom(&_TickenEvent.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TickenEvent *TickenEventTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TickenEvent *TickenEventSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TickenEvent.Contract.TransferOwnership(&_TickenEvent.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TickenEvent *TickenEventTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TickenEvent.Contract.TransferOwnership(&_TickenEvent.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TickenEvent *TickenEventTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TickenEvent *TickenEventSession) Unpause() (*types.Transaction, error) {
	return _TickenEvent.Contract.Unpause(&_TickenEvent.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TickenEvent *TickenEventTransactorSession) Unpause() (*types.Transaction, error) {
	return _TickenEvent.Contract.Unpause(&_TickenEvent.TransactOpts)
}

// TickenEventApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TickenEvent contract.
type TickenEventApprovalIterator struct {
	Event *TickenEventApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventApproval represents a Approval event raised by the TickenEvent contract.
type TickenEventApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TickenEventApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventApprovalIterator{contract: _TickenEvent.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TickenEventApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventApproval)
				if err := _TickenEvent.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) ParseApproval(log types.Log) (*TickenEventApproval, error) {
	event := new(TickenEventApproval)
	if err := _TickenEvent.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the TickenEvent contract.
type TickenEventApprovalForAllIterator struct {
	Event *TickenEventApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventApprovalForAll represents a ApprovalForAll event raised by the TickenEvent contract.
type TickenEventApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TickenEvent *TickenEventFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TickenEventApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventApprovalForAllIterator{contract: _TickenEvent.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TickenEvent *TickenEventFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TickenEventApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventApprovalForAll)
				if err := _TickenEvent.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TickenEvent *TickenEventFilterer) ParseApprovalForAll(log types.Log) (*TickenEventApprovalForAll, error) {
	event := new(TickenEventApprovalForAll)
	if err := _TickenEvent.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TickenEvent contract.
type TickenEventOwnershipTransferredIterator struct {
	Event *TickenEventOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventOwnershipTransferred represents a OwnershipTransferred event raised by the TickenEvent contract.
type TickenEventOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TickenEvent *TickenEventFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TickenEventOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventOwnershipTransferredIterator{contract: _TickenEvent.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TickenEvent *TickenEventFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TickenEventOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventOwnershipTransferred)
				if err := _TickenEvent.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TickenEvent *TickenEventFilterer) ParseOwnershipTransferred(log types.Log) (*TickenEventOwnershipTransferred, error) {
	event := new(TickenEventOwnershipTransferred)
	if err := _TickenEvent.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the TickenEvent contract.
type TickenEventPausedIterator struct {
	Event *TickenEventPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventPaused represents a Paused event raised by the TickenEvent contract.
type TickenEventPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TickenEvent *TickenEventFilterer) FilterPaused(opts *bind.FilterOpts) (*TickenEventPausedIterator, error) {

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &TickenEventPausedIterator{contract: _TickenEvent.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TickenEvent *TickenEventFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *TickenEventPaused) (event.Subscription, error) {

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventPaused)
				if err := _TickenEvent.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TickenEvent *TickenEventFilterer) ParsePaused(log types.Log) (*TickenEventPaused, error) {
	event := new(TickenEventPaused)
	if err := _TickenEvent.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventTicketCreatedIterator is returned from FilterTicketCreated and is used to iterate over the raw logs and unpacked data for TicketCreated events raised by the TickenEvent contract.
type TickenEventTicketCreatedIterator struct {
	Event *TickenEventTicketCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventTicketCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventTicketCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventTicketCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventTicketCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventTicketCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventTicketCreated represents a TicketCreated event raised by the TickenEvent contract.
type TickenEventTicketCreated struct {
	OwnerAddress common.Address
	TokenID      *big.Int
	Section      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTicketCreated is a free log retrieval operation binding the contract event 0x7855cbf78d66c808eecc029b64112ad83f9386e16b47f653e6eac8bc69beda61.
//
// Solidity: event TicketCreated(address ownerAddress, uint256 indexed tokenID, string section)
func (_TickenEvent *TickenEventFilterer) FilterTicketCreated(opts *bind.FilterOpts, tokenID []*big.Int) (*TickenEventTicketCreatedIterator, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "TicketCreated", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventTicketCreatedIterator{contract: _TickenEvent.contract, event: "TicketCreated", logs: logs, sub: sub}, nil
}

// WatchTicketCreated is a free log subscription operation binding the contract event 0x7855cbf78d66c808eecc029b64112ad83f9386e16b47f653e6eac8bc69beda61.
//
// Solidity: event TicketCreated(address ownerAddress, uint256 indexed tokenID, string section)
func (_TickenEvent *TickenEventFilterer) WatchTicketCreated(opts *bind.WatchOpts, sink chan<- *TickenEventTicketCreated, tokenID []*big.Int) (event.Subscription, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "TicketCreated", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventTicketCreated)
				if err := _TickenEvent.contract.UnpackLog(event, "TicketCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTicketCreated is a log parse operation binding the contract event 0x7855cbf78d66c808eecc029b64112ad83f9386e16b47f653e6eac8bc69beda61.
//
// Solidity: event TicketCreated(address ownerAddress, uint256 indexed tokenID, string section)
func (_TickenEvent *TickenEventFilterer) ParseTicketCreated(log types.Log) (*TickenEventTicketCreated, error) {
	event := new(TickenEventTicketCreated)
	if err := _TickenEvent.contract.UnpackLog(event, "TicketCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TickenEvent contract.
type TickenEventTransferIterator struct {
	Event *TickenEventTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventTransfer represents a Transfer event raised by the TickenEvent contract.
type TickenEventTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TickenEventTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventTransferIterator{contract: _TickenEvent.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TickenEventTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventTransfer)
				if err := _TickenEvent.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) ParseTransfer(log types.Log) (*TickenEventTransfer, error) {
	event := new(TickenEventTransfer)
	if err := _TickenEvent.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the TickenEvent contract.
type TickenEventUnpausedIterator struct {
	Event *TickenEventUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventUnpaused represents a Unpaused event raised by the TickenEvent contract.
type TickenEventUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TickenEvent *TickenEventFilterer) FilterUnpaused(opts *bind.FilterOpts) (*TickenEventUnpausedIterator, error) {

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &TickenEventUnpausedIterator{contract: _TickenEvent.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TickenEvent *TickenEventFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *TickenEventUnpaused) (event.Subscription, error) {

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventUnpaused)
				if err := _TickenEvent.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TickenEvent *TickenEventFilterer) ParseUnpaused(log types.Log) (*TickenEventUnpaused, error) {
	event := new(TickenEventUnpaused)
	if err := _TickenEvent.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
