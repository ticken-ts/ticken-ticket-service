// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package public_blockchain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Ticket is an auto generated low-level Go binding around an user-defined struct.
type Ticket struct {
	Section string
	Scanned bool
}

// TicketDTO is an auto generated low-level Go binding around an user-defined struct.
type TicketDTO struct {
	Id      *big.Int
	Section string
	Scanned bool
}

// TickenEventMetaData contains all meta data concerning the TickenEvent contract.
var TickenEventMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"section\",\"type\":\"string\"}],\"name\":\"TicketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"section\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"scanned\",\"type\":\"bool\"}],\"internalType\":\"structTicket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTicketsByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"section\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"scanned\",\"type\":\"bool\"}],\"internalType\":\"structTicketDTO[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"section\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"scanTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600b81526020017f5469636b656e4576656e740000000000000000000000000000000000000000008152506040518060400160405280600281526020017f544500000000000000000000000000000000000000000000000000000000000081525081600090816200008f91906200042d565b508060019081620000a191906200042d565b5050506000600660006101000a81548160ff021916908315150217905550620000df620000d3620000e560201b60201c565b620000ed60201b60201c565b62000514565b600033905090565b6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023557607f821691505b6020821081036200024b576200024a620001ed565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000276565b620002c1868362000276565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200030e620003086200030284620002d9565b620002e3565b620002d9565b9050919050565b6000819050919050565b6200032a83620002ed565b62000342620003398262000315565b84845462000283565b825550505050565b600090565b620003596200034a565b620003668184846200031f565b505050565b5b818110156200038e57620003826000826200034f565b6001810190506200036c565b5050565b601f821115620003dd57620003a78162000251565b620003b28462000266565b81016020851015620003c2578190505b620003da620003d18562000266565b8301826200036b565b50505b505050565b600082821c905092915050565b60006200040260001984600802620003e2565b1980831691505092915050565b60006200041d8383620003ef565b9150826002028217905092915050565b6200043882620001b3565b67ffffffffffffffff811115620004545762000453620001be565b5b6200046082546200021c565b6200046d82828562000392565b600060209050601f831160018114620004a5576000841562000490578287015190505b6200049c85826200040f565b8655506200050c565b601f198416620004b58662000251565b60005b82811015620004df57848901518255600182019150602085019450602081019050620004b8565b86831015620004ff5784890151620004fb601f891682620003ef565b8355505b6001600288020188555050505b505050505050565b61399d80620005246000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063b88d4fde1161007c578063b88d4fde14610378578063c87b56dd14610394578063d204c45e146103c4578063daf62ebb146103e0578063e985e9c5146103fc578063f2fde38b1461042c5761014d565b8063715018a6146102dc5780637dc379fa146102e65780638456cb59146103165780638da5cb5b1461032057806395d89b411461033e578063a22cb4651461035c5761014d565b80633f4ba83a116101155780633f4ba83a1461020857806342842e0e146102125780635c975abb1461022e5780636352211e1461024c57806367aa23e21461027c57806370a08231146102ac5761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d057806323b872dd146101ec575b600080fd5b61016c6004803603810190610167919061237d565b610448565b60405161017991906123c5565b60405180910390f35b61018a61052a565b6040516101979190612470565b60405180910390f35b6101ba60048036038101906101b591906124c8565b6105bc565b6040516101c79190612536565b60405180910390f35b6101ea60048036038101906101e5919061257d565b610602565b005b610206600480360381019061020191906125bd565b610719565b005b610210610779565b005b61022c600480360381019061022791906125bd565b61078b565b005b6102366107ab565b60405161024391906123c5565b60405180910390f35b610266600480360381019061026191906124c8565b6107c2565b6040516102739190612536565b60405180910390f35b61029660048036038101906102919190612610565b610848565b6040516102a391906127b7565b60405180910390f35b6102c660048036038101906102c19190612610565b610a92565b6040516102d391906127e8565b60405180910390f35b6102e4610b49565b005b61030060048036038101906102fb91906124c8565b610b5d565b60405161030d9190612840565b60405180910390f35b61031e610c7f565b005b610328610c91565b6040516103359190612536565b60405180910390f35b610346610cbb565b6040516103539190612470565b60405180910390f35b6103766004803603810190610371919061288e565b610d4d565b005b610392600480360381019061038d9190612a03565b610d63565b005b6103ae60048036038101906103a991906124c8565b610dc5565b6040516103bb9190612470565b60405180910390f35b6103de60048036038101906103d99190612b27565b610e2d565b005b6103fa60048036038101906103f591906124c8565b610f68565b005b61041660048036038101906104119190612b83565b610ff2565b60405161042391906123c5565b60405180910390f35b61044660048036038101906104419190612610565b611086565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061051357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610523575061052282611109565b5b9050919050565b60606000805461053990612bf2565b80601f016020809104026020016040519081016040528092919081815260200182805461056590612bf2565b80156105b25780601f10610587576101008083540402835291602001916105b2565b820191906000526020600020905b81548152906001019060200180831161059557829003601f168201915b5050505050905090565b60006105c782611173565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061060d826107c2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067490612c95565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661069c6111be565b73ffffffffffffffffffffffffffffffffffffffff1614806106cb57506106ca816106c56111be565b610ff2565b5b61070a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070190612d27565b60405180910390fd5b61071483836111c6565b505050565b61072a6107246111be565b8261127f565b610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076090612db9565b60405180910390fd5b610774838383611314565b505050565b61078161160d565b61078961168b565b565b6107a683838360405180602001604052806000815250610d63565b505050565b6000600660009054906101000a900460ff16905090565b6000806107ce836116ee565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361083f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083690612e25565b60405180910390fd5b80915050919050565b60606000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108d557602002820191906000526020600020905b8154815260200190600101908083116108c1575b505050505090506000815167ffffffffffffffff8111156108f9576108f86128d8565b5b60405190808252806020026020018201604052801561093257816020015b61091f6122d2565b8152602001906001900390816109175790505b50905060005b8251811015610a8757600083828151811061095657610955612e45565b5b6020026020010151905060006008600083815260200190815260200160002060405180604001604052908160008201805461099090612bf2565b80601f01602080910402602001604051908101604052809291908181526020018280546109bc90612bf2565b8015610a095780601f106109de57610100808354040283529160200191610a09565b820191906000526020600020905b8154815290600101906020018083116109ec57829003601f168201915b505050505081526020016001820160009054906101000a900460ff161515151581525050905060405180606001604052808381526020018260000151815260200182602001511515815250848481518110610a6757610a66612e45565b5b602002602001018190525050508080610a7f90612ea3565b915050610938565b508092505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af990612f5d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b5161160d565b610b5b600061172b565b565b610b656122f5565b610b6e826117f1565b610bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba490612fef565b60405180910390fd5b60086000838152602001908152602001600020604051806040016040529081600082018054610bdb90612bf2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0790612bf2565b8015610c545780601f10610c2957610100808354040283529160200191610c54565b820191906000526020600020905b815481529060010190602001808311610c3757829003601f168201915b505050505081526020016001820160009054906101000a900460ff1615151515815250509050919050565b610c8761160d565b610c8f611832565b565b6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610cca90612bf2565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf690612bf2565b8015610d435780601f10610d1857610100808354040283529160200191610d43565b820191906000526020600020905b815481529060010190602001808311610d2657829003601f168201915b5050505050905090565b610d5f610d586111be565b8383611895565b5050565b610d74610d6e6111be565b8361127f565b610db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610daa90612db9565b60405180910390fd5b610dbf84848484611a01565b50505050565b6060610dd082611173565b6000610dda611a5d565b90506000815111610dfa5760405180602001604052806000815250610e25565b80610e0484611a74565b604051602001610e1592919061304b565b6040516020818303038152906040525b915050919050565b610e35611b42565b610e3d61160d565b6000610e496007611b8c565b9050610e556007611b9a565b610e5f8382611bb0565b604051806040016040528083815260200160001515815250600860008381526020019081526020016000206000820151816000019081610e9f919061321b565b5060208201518160010160006101000a81548160ff021916908315150217905550905050600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055807f7855cbf78d66c808eecc029b64112ad83f9386e16b47f653e6eac8bc69beda618484604051610f5b9291906132ed565b60405180910390a2505050565b610f70611b42565b610f7861160d565b610f81816117f1565b610fc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb790612fef565b60405180910390fd5b60016008600083815260200190815260200160002060010160006101000a81548160ff02191690831515021790555050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61108e61160d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f49061338f565b60405180910390fd5b6111068161172b565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61117c816117f1565b6111bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b290612e25565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611239836107c2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061128b836107c2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806112cd57506112cc8185610ff2565b5b8061130b57508373ffffffffffffffffffffffffffffffffffffffff166112f3846105bc565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611334826107c2565b73ffffffffffffffffffffffffffffffffffffffff161461138a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138190613421565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f0906134b3565b60405180910390fd5b6114068383836001611bce565b8273ffffffffffffffffffffffffffffffffffffffff16611426826107c2565b73ffffffffffffffffffffffffffffffffffffffff161461147c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147390613421565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116088383836001611be8565b505050565b6116156111be565b73ffffffffffffffffffffffffffffffffffffffff16611633610c91565b73ffffffffffffffffffffffffffffffffffffffff1614611689576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116809061351f565b60405180910390fd5b565b611693611bee565b6000600660006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6116d76111be565b6040516116e49190612536565b60405180910390a1565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff16611813836116ee565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61183a611b42565b6001600660006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861187e6111be565b60405161188b9190612536565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fa9061358b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119f491906123c5565b60405180910390a3505050565b611a0c848484611314565b611a1884848484611c37565b611a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4e9061361d565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060006001611a8384611dbe565b01905060008167ffffffffffffffff811115611aa257611aa16128d8565b5b6040519080825280601f01601f191660200182016040528015611ad45781602001600182028036833780820191505090505b509050600082602001820190505b600115611b37578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611b2b57611b2a61363d565b5b04945060008503611ae2575b819350505050919050565b611b4a6107ab565b15611b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b81906136b8565b60405180910390fd5b565b600081600001549050919050565b6001816000016000828254019250508190555050565b611bca828260405180602001604052806000815250611f11565b5050565b611bd6611b42565b611be284848484611f6c565b50505050565b50505050565b611bf66107ab565b611c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2c90613724565b60405180910390fd5b565b6000611c588473ffffffffffffffffffffffffffffffffffffffff16612092565b15611db1578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c816111be565b8786866040518563ffffffff1660e01b8152600401611ca39493929190613799565b6020604051808303816000875af1925050508015611cdf57506040513d601f19601f82011682018060405250810190611cdc91906137fa565b60015b611d61573d8060008114611d0f576040519150601f19603f3d011682016040523d82523d6000602084013e611d14565b606091505b506000815103611d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d509061361d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611db6565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611e1c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611e1257611e1161363d565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611e59576d04ee2d6d415b85acef81000000008381611e4f57611e4e61363d565b5b0492506020810190505b662386f26fc100008310611e8857662386f26fc100008381611e7e57611e7d61363d565b5b0492506010810190505b6305f5e1008310611eb1576305f5e1008381611ea757611ea661363d565b5b0492506008810190505b6127108310611ed6576127108381611ecc57611ecb61363d565b5b0492506004810190505b60648310611ef95760648381611eef57611eee61363d565b5b0492506002810190505b600a8310611f08576001810190505b80915050919050565b611f1b83836120b5565b611f286000848484611c37565b611f67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5e9061361d565b60405180910390fd5b505050565b600181111561208c57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146120005780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ff89190613827565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461208b5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612083919061385b565b925050819055505b5b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211b906138db565b60405180910390fd5b61212d816117f1565b1561216d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216490613947565b60405180910390fd5b61217b600083836001611bce565b612184816117f1565b156121c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bb90613947565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122ce600083836001611be8565b5050565b604051806060016040528060008152602001606081526020016000151581525090565b6040518060400160405280606081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61235a81612325565b811461236557600080fd5b50565b60008135905061237781612351565b92915050565b6000602082840312156123935761239261231b565b5b60006123a184828501612368565b91505092915050565b60008115159050919050565b6123bf816123aa565b82525050565b60006020820190506123da60008301846123b6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561241a5780820151818401526020810190506123ff565b60008484015250505050565b6000601f19601f8301169050919050565b6000612442826123e0565b61244c81856123eb565b935061245c8185602086016123fc565b61246581612426565b840191505092915050565b6000602082019050818103600083015261248a8184612437565b905092915050565b6000819050919050565b6124a581612492565b81146124b057600080fd5b50565b6000813590506124c28161249c565b92915050565b6000602082840312156124de576124dd61231b565b5b60006124ec848285016124b3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612520826124f5565b9050919050565b61253081612515565b82525050565b600060208201905061254b6000830184612527565b92915050565b61255a81612515565b811461256557600080fd5b50565b60008135905061257781612551565b92915050565b600080604083850312156125945761259361231b565b5b60006125a285828601612568565b92505060206125b3858286016124b3565b9150509250929050565b6000806000606084860312156125d6576125d561231b565b5b60006125e486828701612568565b93505060206125f586828701612568565b9250506040612606868287016124b3565b9150509250925092565b6000602082840312156126265761262561231b565b5b600061263484828501612568565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61267281612492565b82525050565b600082825260208201905092915050565b6000612694826123e0565b61269e8185612678565b93506126ae8185602086016123fc565b6126b781612426565b840191505092915050565b6126cb816123aa565b82525050565b60006060830160008301516126e96000860182612669565b50602083015184820360208601526127018282612689565b915050604083015161271660408601826126c2565b508091505092915050565b600061272d83836126d1565b905092915050565b6000602082019050919050565b600061274d8261263d565b6127578185612648565b93508360208202850161276985612659565b8060005b858110156127a557848403895281516127868582612721565b945061279183612735565b925060208a0199505060018101905061276d565b50829750879550505050505092915050565b600060208201905081810360008301526127d18184612742565b905092915050565b6127e281612492565b82525050565b60006020820190506127fd60008301846127d9565b92915050565b600060408301600083015184820360008601526128208282612689565b915050602083015161283560208601826126c2565b508091505092915050565b6000602082019050818103600083015261285a8184612803565b905092915050565b61286b816123aa565b811461287657600080fd5b50565b60008135905061288881612862565b92915050565b600080604083850312156128a5576128a461231b565b5b60006128b385828601612568565b92505060206128c485828601612879565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61291082612426565b810181811067ffffffffffffffff8211171561292f5761292e6128d8565b5b80604052505050565b6000612942612311565b905061294e8282612907565b919050565b600067ffffffffffffffff82111561296e5761296d6128d8565b5b61297782612426565b9050602081019050919050565b82818337600083830152505050565b60006129a66129a184612953565b612938565b9050828152602081018484840111156129c2576129c16128d3565b5b6129cd848285612984565b509392505050565b600082601f8301126129ea576129e96128ce565b5b81356129fa848260208601612993565b91505092915050565b60008060008060808587031215612a1d57612a1c61231b565b5b6000612a2b87828801612568565b9450506020612a3c87828801612568565b9350506040612a4d878288016124b3565b925050606085013567ffffffffffffffff811115612a6e57612a6d612320565b5b612a7a878288016129d5565b91505092959194509250565b600067ffffffffffffffff821115612aa157612aa06128d8565b5b612aaa82612426565b9050602081019050919050565b6000612aca612ac584612a86565b612938565b905082815260208101848484011115612ae657612ae56128d3565b5b612af1848285612984565b509392505050565b600082601f830112612b0e57612b0d6128ce565b5b8135612b1e848260208601612ab7565b91505092915050565b60008060408385031215612b3e57612b3d61231b565b5b6000612b4c85828601612568565b925050602083013567ffffffffffffffff811115612b6d57612b6c612320565b5b612b7985828601612af9565b9150509250929050565b60008060408385031215612b9a57612b9961231b565b5b6000612ba885828601612568565b9250506020612bb985828601612568565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612c0a57607f821691505b602082108103612c1d57612c1c612bc3565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c7f6021836123eb565b9150612c8a82612c23565b604082019050919050565b60006020820190508181036000830152612cae81612c72565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612d11603d836123eb565b9150612d1c82612cb5565b604082019050919050565b60006020820190508181036000830152612d4081612d04565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612da3602d836123eb565b9150612dae82612d47565b604082019050919050565b60006020820190508181036000830152612dd281612d96565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612e0f6018836123eb565b9150612e1a82612dd9565b602082019050919050565b60006020820190508181036000830152612e3e81612e02565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612eae82612492565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ee057612edf612e74565b5b600182019050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612f476029836123eb565b9150612f5282612eeb565b604082019050919050565b60006020820190508181036000830152612f7681612f3a565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612fd9602c836123eb565b9150612fe482612f7d565b604082019050919050565b6000602082019050818103600083015261300881612fcc565b9050919050565b600081905092915050565b6000613025826123e0565b61302f818561300f565b935061303f8185602086016123fc565b80840191505092915050565b6000613057828561301a565b9150613063828461301a565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130d17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613094565b6130db8683613094565b95508019841693508086168417925050509392505050565b6000819050919050565b600061311861311361310e84612492565b6130f3565b612492565b9050919050565b6000819050919050565b613132836130fd565b61314661313e8261311f565b8484546130a1565b825550505050565b600090565b61315b61314e565b613166818484613129565b505050565b5b8181101561318a5761317f600082613153565b60018101905061316c565b5050565b601f8211156131cf576131a08161306f565b6131a984613084565b810160208510156131b8578190505b6131cc6131c485613084565b83018261316b565b50505b505050565b600082821c905092915050565b60006131f2600019846008026131d4565b1980831691505092915050565b600061320b83836131e1565b9150826002028217905092915050565b613224826123e0565b67ffffffffffffffff81111561323d5761323c6128d8565b5b6132478254612bf2565b61325282828561318e565b600060209050601f8311600181146132855760008415613273578287015190505b61327d85826131ff565b8655506132e5565b601f1984166132938661306f565b60005b828110156132bb57848901518255600182019150602085019450602081019050613296565b868310156132d857848901516132d4601f8916826131e1565b8355505b6001600288020188555050505b505050505050565b60006040820190506133026000830185612527565b81810360208301526133148184612437565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006133796026836123eb565b91506133848261331d565b604082019050919050565b600060208201905081810360008301526133a88161336c565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061340b6025836123eb565b9150613416826133af565b604082019050919050565b6000602082019050818103600083015261343a816133fe565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061349d6024836123eb565b91506134a882613441565b604082019050919050565b600060208201905081810360008301526134cc81613490565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006135096020836123eb565b9150613514826134d3565b602082019050919050565b60006020820190508181036000830152613538816134fc565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006135756019836123eb565b91506135808261353f565b602082019050919050565b600060208201905081810360008301526135a481613568565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006136076032836123eb565b9150613612826135ab565b604082019050919050565b60006020820190508181036000830152613636816135fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006136a26010836123eb565b91506136ad8261366c565b602082019050919050565b600060208201905081810360008301526136d181613695565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061370e6014836123eb565b9150613719826136d8565b602082019050919050565b6000602082019050818103600083015261373d81613701565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061376b82613744565b613775818561374f565b93506137858185602086016123fc565b61378e81612426565b840191505092915050565b60006080820190506137ae6000830187612527565b6137bb6020830186612527565b6137c860408301856127d9565b81810360608301526137da8184613760565b905095945050505050565b6000815190506137f481612351565b92915050565b6000602082840312156138105761380f61231b565b5b600061381e848285016137e5565b91505092915050565b600061383282612492565b915061383d83612492565b925082820390508181111561385557613854612e74565b5b92915050565b600061386682612492565b915061387183612492565b925082820190508082111561388957613888612e74565b5b92915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006138c56020836123eb565b91506138d08261388f565b602082019050919050565b600060208201905081810360008301526138f4816138b8565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613931601c836123eb565b915061393c826138fb565b602082019050919050565b6000602082019050818103600083015261396081613924565b905091905056fea26469706673582212203c042fc7f694b197f04b14b933dc49ce4889e81445f2348aca667755f7cbd16064736f6c63430008110033",
}

// TickenEventABI is the input ABI used to generate the binding from.
// Deprecated: Use TickenEventMetaData.ABI instead.
var TickenEventABI = TickenEventMetaData.ABI

// TickenEventBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TickenEventMetaData.Bin instead.
var TickenEventBin = TickenEventMetaData.Bin

// DeployTickenEvent deploys a new Ethereum contract, binding an instance of TickenEvent to it.
func DeployTickenEvent(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TickenEvent, error) {
	parsed, err := TickenEventMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TickenEventBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TickenEvent{TickenEventCaller: TickenEventCaller{contract: contract}, TickenEventTransactor: TickenEventTransactor{contract: contract}, TickenEventFilterer: TickenEventFilterer{contract: contract}}, nil
}

// TickenEvent is an auto generated Go binding around an Ethereum contract.
type TickenEvent struct {
	TickenEventCaller     // Read-only binding to the contract
	TickenEventTransactor // Write-only binding to the contract
	TickenEventFilterer   // Log filterer for contract events
}

// TickenEventCaller is an auto generated read-only Go binding around an Ethereum contract.
type TickenEventCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickenEventTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TickenEventTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickenEventFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TickenEventFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickenEventSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TickenEventSession struct {
	Contract     *TickenEvent      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TickenEventCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TickenEventCallerSession struct {
	Contract *TickenEventCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TickenEventTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TickenEventTransactorSession struct {
	Contract     *TickenEventTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TickenEventRaw is an auto generated low-level Go binding around an Ethereum contract.
type TickenEventRaw struct {
	Contract *TickenEvent // Generic contract binding to access the raw methods on
}

// TickenEventCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TickenEventCallerRaw struct {
	Contract *TickenEventCaller // Generic read-only contract binding to access the raw methods on
}

// TickenEventTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TickenEventTransactorRaw struct {
	Contract *TickenEventTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTickenEvent creates a new instance of TickenEvent, bound to a specific deployed contract.
func NewTickenEvent(address common.Address, backend bind.ContractBackend) (*TickenEvent, error) {
	contract, err := bindTickenEvent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TickenEvent{TickenEventCaller: TickenEventCaller{contract: contract}, TickenEventTransactor: TickenEventTransactor{contract: contract}, TickenEventFilterer: TickenEventFilterer{contract: contract}}, nil
}

// NewTickenEventCaller creates a new read-only instance of TickenEvent, bound to a specific deployed contract.
func NewTickenEventCaller(address common.Address, caller bind.ContractCaller) (*TickenEventCaller, error) {
	contract, err := bindTickenEvent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TickenEventCaller{contract: contract}, nil
}

// NewTickenEventTransactor creates a new write-only instance of TickenEvent, bound to a specific deployed contract.
func NewTickenEventTransactor(address common.Address, transactor bind.ContractTransactor) (*TickenEventTransactor, error) {
	contract, err := bindTickenEvent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TickenEventTransactor{contract: contract}, nil
}

// NewTickenEventFilterer creates a new log filterer instance of TickenEvent, bound to a specific deployed contract.
func NewTickenEventFilterer(address common.Address, filterer bind.ContractFilterer) (*TickenEventFilterer, error) {
	contract, err := bindTickenEvent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TickenEventFilterer{contract: contract}, nil
}

// bindTickenEvent binds a generic wrapper to an already deployed contract.
func bindTickenEvent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TickenEventABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TickenEvent *TickenEventRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TickenEvent.Contract.TickenEventCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TickenEvent *TickenEventRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.Contract.TickenEventTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TickenEvent *TickenEventRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TickenEvent.Contract.TickenEventTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TickenEvent *TickenEventCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TickenEvent.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TickenEvent *TickenEventTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TickenEvent *TickenEventTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TickenEvent.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TickenEvent *TickenEventCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TickenEvent *TickenEventSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TickenEvent.Contract.BalanceOf(&_TickenEvent.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TickenEvent *TickenEventCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TickenEvent.Contract.BalanceOf(&_TickenEvent.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TickenEvent.Contract.GetApproved(&_TickenEvent.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TickenEvent.Contract.GetApproved(&_TickenEvent.CallOpts, tokenId)
}

// GetTicket is a free data retrieval call binding the contract method 0x7dc379fa.
//
// Solidity: function getTicket(uint256 tokenId) view returns((string,bool))
func (_TickenEvent *TickenEventCaller) GetTicket(opts *bind.CallOpts, tokenId *big.Int) (Ticket, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "getTicket", tokenId)

	if err != nil {
		return *new(Ticket), err
	}

	out0 := *abi.ConvertType(out[0], new(Ticket)).(*Ticket)

	return out0, err

}

// GetTicket is a free data retrieval call binding the contract method 0x7dc379fa.
//
// Solidity: function getTicket(uint256 tokenId) view returns((string,bool))
func (_TickenEvent *TickenEventSession) GetTicket(tokenId *big.Int) (Ticket, error) {
	return _TickenEvent.Contract.GetTicket(&_TickenEvent.CallOpts, tokenId)
}

// GetTicket is a free data retrieval call binding the contract method 0x7dc379fa.
//
// Solidity: function getTicket(uint256 tokenId) view returns((string,bool))
func (_TickenEvent *TickenEventCallerSession) GetTicket(tokenId *big.Int) (Ticket, error) {
	return _TickenEvent.Contract.GetTicket(&_TickenEvent.CallOpts, tokenId)
}

// GetTicketsByOwner is a free data retrieval call binding the contract method 0x67aa23e2.
//
// Solidity: function getTicketsByOwner(address owner) view returns((uint256,string,bool)[])
func (_TickenEvent *TickenEventCaller) GetTicketsByOwner(opts *bind.CallOpts, owner common.Address) ([]TicketDTO, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "getTicketsByOwner", owner)

	if err != nil {
		return *new([]TicketDTO), err
	}

	out0 := *abi.ConvertType(out[0], new([]TicketDTO)).(*[]TicketDTO)

	return out0, err

}

// GetTicketsByOwner is a free data retrieval call binding the contract method 0x67aa23e2.
//
// Solidity: function getTicketsByOwner(address owner) view returns((uint256,string,bool)[])
func (_TickenEvent *TickenEventSession) GetTicketsByOwner(owner common.Address) ([]TicketDTO, error) {
	return _TickenEvent.Contract.GetTicketsByOwner(&_TickenEvent.CallOpts, owner)
}

// GetTicketsByOwner is a free data retrieval call binding the contract method 0x67aa23e2.
//
// Solidity: function getTicketsByOwner(address owner) view returns((uint256,string,bool)[])
func (_TickenEvent *TickenEventCallerSession) GetTicketsByOwner(owner common.Address) ([]TicketDTO, error) {
	return _TickenEvent.Contract.GetTicketsByOwner(&_TickenEvent.CallOpts, owner)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TickenEvent *TickenEventCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TickenEvent *TickenEventSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TickenEvent.Contract.IsApprovedForAll(&_TickenEvent.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TickenEvent *TickenEventCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TickenEvent.Contract.IsApprovedForAll(&_TickenEvent.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TickenEvent *TickenEventCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TickenEvent *TickenEventSession) Name() (string, error) {
	return _TickenEvent.Contract.Name(&_TickenEvent.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TickenEvent *TickenEventCallerSession) Name() (string, error) {
	return _TickenEvent.Contract.Name(&_TickenEvent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TickenEvent *TickenEventCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TickenEvent *TickenEventSession) Owner() (common.Address, error) {
	return _TickenEvent.Contract.Owner(&_TickenEvent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TickenEvent *TickenEventCallerSession) Owner() (common.Address, error) {
	return _TickenEvent.Contract.Owner(&_TickenEvent.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TickenEvent.Contract.OwnerOf(&_TickenEvent.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TickenEvent *TickenEventCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TickenEvent.Contract.OwnerOf(&_TickenEvent.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TickenEvent *TickenEventCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TickenEvent *TickenEventSession) Paused() (bool, error) {
	return _TickenEvent.Contract.Paused(&_TickenEvent.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TickenEvent *TickenEventCallerSession) Paused() (bool, error) {
	return _TickenEvent.Contract.Paused(&_TickenEvent.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TickenEvent *TickenEventCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TickenEvent *TickenEventSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TickenEvent.Contract.SupportsInterface(&_TickenEvent.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TickenEvent *TickenEventCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TickenEvent.Contract.SupportsInterface(&_TickenEvent.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TickenEvent *TickenEventCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TickenEvent *TickenEventSession) Symbol() (string, error) {
	return _TickenEvent.Contract.Symbol(&_TickenEvent.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TickenEvent *TickenEventCallerSession) Symbol() (string, error) {
	return _TickenEvent.Contract.Symbol(&_TickenEvent.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TickenEvent *TickenEventCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TickenEvent.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TickenEvent *TickenEventSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TickenEvent.Contract.TokenURI(&_TickenEvent.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TickenEvent *TickenEventCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TickenEvent.Contract.TokenURI(&_TickenEvent.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.Approve(&_TickenEvent.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.Approve(&_TickenEvent.TransactOpts, to, tokenId)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TickenEvent *TickenEventTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TickenEvent *TickenEventSession) Pause() (*types.Transaction, error) {
	return _TickenEvent.Contract.Pause(&_TickenEvent.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TickenEvent *TickenEventTransactorSession) Pause() (*types.Transaction, error) {
	return _TickenEvent.Contract.Pause(&_TickenEvent.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TickenEvent *TickenEventTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TickenEvent *TickenEventSession) RenounceOwnership() (*types.Transaction, error) {
	return _TickenEvent.Contract.RenounceOwnership(&_TickenEvent.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TickenEvent *TickenEventTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TickenEvent.Contract.RenounceOwnership(&_TickenEvent.TransactOpts)
}

// SafeMint is a paid mutator transaction binding the contract method 0xd204c45e.
//
// Solidity: function safeMint(address to, string section) returns()
func (_TickenEvent *TickenEventTransactor) SafeMint(opts *bind.TransactOpts, to common.Address, section string) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "safeMint", to, section)
}

// SafeMint is a paid mutator transaction binding the contract method 0xd204c45e.
//
// Solidity: function safeMint(address to, string section) returns()
func (_TickenEvent *TickenEventSession) SafeMint(to common.Address, section string) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeMint(&_TickenEvent.TransactOpts, to, section)
}

// SafeMint is a paid mutator transaction binding the contract method 0xd204c45e.
//
// Solidity: function safeMint(address to, string section) returns()
func (_TickenEvent *TickenEventTransactorSession) SafeMint(to common.Address, section string) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeMint(&_TickenEvent.TransactOpts, to, section)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeTransferFrom(&_TickenEvent.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeTransferFrom(&_TickenEvent.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TickenEvent *TickenEventTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TickenEvent *TickenEventSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeTransferFrom0(&_TickenEvent.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TickenEvent *TickenEventTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TickenEvent.Contract.SafeTransferFrom0(&_TickenEvent.TransactOpts, from, to, tokenId, data)
}

// ScanTicket is a paid mutator transaction binding the contract method 0xdaf62ebb.
//
// Solidity: function scanTicket(uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactor) ScanTicket(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "scanTicket", tokenId)
}

// ScanTicket is a paid mutator transaction binding the contract method 0xdaf62ebb.
//
// Solidity: function scanTicket(uint256 tokenId) returns()
func (_TickenEvent *TickenEventSession) ScanTicket(tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.ScanTicket(&_TickenEvent.TransactOpts, tokenId)
}

// ScanTicket is a paid mutator transaction binding the contract method 0xdaf62ebb.
//
// Solidity: function scanTicket(uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactorSession) ScanTicket(tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.ScanTicket(&_TickenEvent.TransactOpts, tokenId)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TickenEvent *TickenEventTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TickenEvent *TickenEventSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TickenEvent.Contract.SetApprovalForAll(&_TickenEvent.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TickenEvent *TickenEventTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TickenEvent.Contract.SetApprovalForAll(&_TickenEvent.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.TransferFrom(&_TickenEvent.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TickenEvent *TickenEventTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TickenEvent.Contract.TransferFrom(&_TickenEvent.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TickenEvent *TickenEventTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TickenEvent *TickenEventSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TickenEvent.Contract.TransferOwnership(&_TickenEvent.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TickenEvent *TickenEventTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TickenEvent.Contract.TransferOwnership(&_TickenEvent.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TickenEvent *TickenEventTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickenEvent.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TickenEvent *TickenEventSession) Unpause() (*types.Transaction, error) {
	return _TickenEvent.Contract.Unpause(&_TickenEvent.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TickenEvent *TickenEventTransactorSession) Unpause() (*types.Transaction, error) {
	return _TickenEvent.Contract.Unpause(&_TickenEvent.TransactOpts)
}

// TickenEventApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TickenEvent contract.
type TickenEventApprovalIterator struct {
	Event *TickenEventApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventApproval represents a Approval event raised by the TickenEvent contract.
type TickenEventApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TickenEventApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventApprovalIterator{contract: _TickenEvent.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TickenEventApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventApproval)
				if err := _TickenEvent.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) ParseApproval(log types.Log) (*TickenEventApproval, error) {
	event := new(TickenEventApproval)
	if err := _TickenEvent.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the TickenEvent contract.
type TickenEventApprovalForAllIterator struct {
	Event *TickenEventApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventApprovalForAll represents a ApprovalForAll event raised by the TickenEvent contract.
type TickenEventApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TickenEvent *TickenEventFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TickenEventApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventApprovalForAllIterator{contract: _TickenEvent.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TickenEvent *TickenEventFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TickenEventApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventApprovalForAll)
				if err := _TickenEvent.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TickenEvent *TickenEventFilterer) ParseApprovalForAll(log types.Log) (*TickenEventApprovalForAll, error) {
	event := new(TickenEventApprovalForAll)
	if err := _TickenEvent.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TickenEvent contract.
type TickenEventOwnershipTransferredIterator struct {
	Event *TickenEventOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventOwnershipTransferred represents a OwnershipTransferred event raised by the TickenEvent contract.
type TickenEventOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TickenEvent *TickenEventFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TickenEventOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventOwnershipTransferredIterator{contract: _TickenEvent.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TickenEvent *TickenEventFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TickenEventOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventOwnershipTransferred)
				if err := _TickenEvent.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TickenEvent *TickenEventFilterer) ParseOwnershipTransferred(log types.Log) (*TickenEventOwnershipTransferred, error) {
	event := new(TickenEventOwnershipTransferred)
	if err := _TickenEvent.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the TickenEvent contract.
type TickenEventPausedIterator struct {
	Event *TickenEventPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventPaused represents a Paused event raised by the TickenEvent contract.
type TickenEventPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TickenEvent *TickenEventFilterer) FilterPaused(opts *bind.FilterOpts) (*TickenEventPausedIterator, error) {

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &TickenEventPausedIterator{contract: _TickenEvent.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TickenEvent *TickenEventFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *TickenEventPaused) (event.Subscription, error) {

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventPaused)
				if err := _TickenEvent.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TickenEvent *TickenEventFilterer) ParsePaused(log types.Log) (*TickenEventPaused, error) {
	event := new(TickenEventPaused)
	if err := _TickenEvent.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventTicketCreatedIterator is returned from FilterTicketCreated and is used to iterate over the raw logs and unpacked data for TicketCreated events raised by the TickenEvent contract.
type TickenEventTicketCreatedIterator struct {
	Event *TickenEventTicketCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventTicketCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventTicketCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventTicketCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventTicketCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventTicketCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventTicketCreated represents a TicketCreated event raised by the TickenEvent contract.
type TickenEventTicketCreated struct {
	OwnerAddress common.Address
	TokenID      *big.Int
	Section      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTicketCreated is a free log retrieval operation binding the contract event 0x7855cbf78d66c808eecc029b64112ad83f9386e16b47f653e6eac8bc69beda61.
//
// Solidity: event TicketCreated(address ownerAddress, uint256 indexed tokenID, string section)
func (_TickenEvent *TickenEventFilterer) FilterTicketCreated(opts *bind.FilterOpts, tokenID []*big.Int) (*TickenEventTicketCreatedIterator, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "TicketCreated", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventTicketCreatedIterator{contract: _TickenEvent.contract, event: "TicketCreated", logs: logs, sub: sub}, nil
}

// WatchTicketCreated is a free log subscription operation binding the contract event 0x7855cbf78d66c808eecc029b64112ad83f9386e16b47f653e6eac8bc69beda61.
//
// Solidity: event TicketCreated(address ownerAddress, uint256 indexed tokenID, string section)
func (_TickenEvent *TickenEventFilterer) WatchTicketCreated(opts *bind.WatchOpts, sink chan<- *TickenEventTicketCreated, tokenID []*big.Int) (event.Subscription, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "TicketCreated", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventTicketCreated)
				if err := _TickenEvent.contract.UnpackLog(event, "TicketCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTicketCreated is a log parse operation binding the contract event 0x7855cbf78d66c808eecc029b64112ad83f9386e16b47f653e6eac8bc69beda61.
//
// Solidity: event TicketCreated(address ownerAddress, uint256 indexed tokenID, string section)
func (_TickenEvent *TickenEventFilterer) ParseTicketCreated(log types.Log) (*TickenEventTicketCreated, error) {
	event := new(TickenEventTicketCreated)
	if err := _TickenEvent.contract.UnpackLog(event, "TicketCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TickenEvent contract.
type TickenEventTransferIterator struct {
	Event *TickenEventTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventTransfer represents a Transfer event raised by the TickenEvent contract.
type TickenEventTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TickenEventTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TickenEventTransferIterator{contract: _TickenEvent.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TickenEventTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventTransfer)
				if err := _TickenEvent.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TickenEvent *TickenEventFilterer) ParseTransfer(log types.Log) (*TickenEventTransfer, error) {
	event := new(TickenEventTransfer)
	if err := _TickenEvent.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TickenEventUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the TickenEvent contract.
type TickenEventUnpausedIterator struct {
	Event *TickenEventUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TickenEventUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TickenEventUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TickenEventUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TickenEventUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TickenEventUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TickenEventUnpaused represents a Unpaused event raised by the TickenEvent contract.
type TickenEventUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TickenEvent *TickenEventFilterer) FilterUnpaused(opts *bind.FilterOpts) (*TickenEventUnpausedIterator, error) {

	logs, sub, err := _TickenEvent.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &TickenEventUnpausedIterator{contract: _TickenEvent.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TickenEvent *TickenEventFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *TickenEventUnpaused) (event.Subscription, error) {

	logs, sub, err := _TickenEvent.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TickenEventUnpaused)
				if err := _TickenEvent.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TickenEvent *TickenEventFilterer) ParseUnpaused(log types.Log) (*TickenEventUnpaused, error) {
	event := new(TickenEventUnpaused)
	if err := _TickenEvent.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
